"""
Script to merge the two simulations with the different anomalous diffusion coefficient
"""
import transp_output
import numpy as np
import matplotlib.pyplot as plt
from ascot_utils import common_style, limit_labels, _cumulative_plot, _plot_2d, _plot_1d
common_style()
col = ['k','r','b','m','g','c']
col2=np.copy(col)
col2[0]='y'


fname1 = '/home/vallar/TCV/58823/58823V42.CDF' #TAUP=19ms D=0, my zeff. This must be used before 1 sec
fname2 = '/home/vallar/TCV/58823/58823V59.CDF' #TAUP=12ms , zeff=2.0 cons44tant. This must be used after 1 sec

o1 = transp_output.output_1d(fname1)
o2 = transp_output.output_1d(fname2)
time_split=1. #time dividing the two simulations
ind1 = np.logical_and(o1.t<time_split, o1.t>0.8)
ind2 = o2.t>time_split
ind1=np.where(ind1==True)[0]; ind2=np.where(ind2==True)[0]


# ###################
# # Power balance
# ###################
# labels = ['Abs.', 'CX', 'O. L.', 'Shine-thr.']
# xlabel = r'Time [s]'
# ylabel = r'Power [MW]'
# x,y,yH,yfrac = o1._init_pbalance_vars()
# x1=x[ind1]; y1=y[:,ind1]; yH1=yH[:,ind1]; yfrac1=yfrac[:,ind1]
# x,y,yH,yfrac = o2._init_pbalance_vars()
# x2=x[ind2]; y2=y[:,ind2]; yH2=yH[:,ind2]; yfrac2=yfrac[:,ind2]
# x = np.append(x1,x2); y=np.append(y1,y2, axis=1)
# yH = np.append(yH1,yH2, axis=1); yfrac=np.append(yfrac1,yfrac2, axis=1)

# f=plt.figure(figsize=(15,5))
# axfrac = f.add_subplot(122)
# o1._plot_pbalance_frac(x, yfrac, axfrac, ls='-', leg=0)
# axfrac.set_ylim([0,60])
# axabs = f.add_subplot(121)
# _cumulative_plot(x,y,labels, xlabel, ylabel, col2, ax=axabs, title='')
# axfrac.legend(loc='best', fontsize='medium')

# f.subplots_adjust(right=0.8)        
# f.tight_layout()

###################
# Power gi, ge
###################
f = plt.figure(figsize=(10, 8))
axp = f.add_subplot(211)
axf = f.add_subplot(212, sharex=axp)
t = np.concatenate((o1.t[ind1], o2.t[ind2]))
tmp=np.concatenate((o1.pe[ind1], o2.pe[ind2]))
_plot_1d(t, tmp*1e-3, ax=axp, color='k', label=r'e')
tmp=np.concatenate((o1.pi[ind1], o2.pi[ind2]))
_plot_1d(t, tmp*1e-3, ax=axp, color='r', label=r'i')
tmp=np.concatenate((o1.pe[ind1]/(o1.pi[ind1]+o1.pe[ind1]), o2.pe[ind2]/(o2.pi[ind2]+o2.pe[ind2])))
_plot_1d(t, tmp*100., ax=axf, color='k', label=r'e')
tmp=np.concatenate((o1.pi[ind1]/(o1.pi[ind1]+o1.pe[ind1]), o2.pi[ind2]/(o2.pi[ind2]+o2.pe[ind2])))
_plot_1d(t, tmp*100., ax=axf, color='r', label=r'i')
tmp=np.concatenate((o1.gi_vavg[ind1], o2.gi_vavg[ind2]))
axf.plot(t, tmp*1e2, 'c', lw=2.3, label=r'G')

limit_labels(axp,r'Time [s]',r'P[kW]','')
limit_labels(axf,r'Time [s]',r'%','')
axp.set_ylim([0,200]); axf.set_ylim([0,100.])
axf.legend(loc='best')
f.tight_layout()
###################
# Power deposition profiles (pe, pi, nf/ntot)
###################
rho1=o1.rho
rho2=o2.rho
ind1t = np.argmin(o1.t-0.9  < 0.)
ind2t = np.argmin(o2.t-1.25 < 0.)

f=plt.figure(figsize=(18,6)); 
axi = f.add_subplot(131); axe=f.add_subplot(132); axn=f.add_subplot(133)
lab=r't=0.9 s'
axi.plot(rho1, o1.nb_FKP_vars['pi'][ind1t,:]*1e-3, 'k', lw=2, label=lab)
axe.plot(rho1, o1.nb_FKP_vars['pe'][ind1t,:]*1e-3, 'k', lw=2, label=lab)
axn.plot(rho1, o1.nb_FKP_vars['n'][ind1t, :]/o1.kin_vars['ne'][ind1t,:]*100., 'k', lw=2, label=lab)
lab=r't=1.25 s'
axi.plot(rho2, o2.nb_FKP_vars['pi'][ind2t,:]*1e-3, 'r', lw=2, label=lab)
axe.plot(rho2, o2.nb_FKP_vars['pe'][ind2t,:]*1e-3, 'r', lw=2, label=lab)
axn.plot(rho2, o2.nb_FKP_vars['n'][ind2t, :]/o2.kin_vars['ne'][ind2t,:]*100., 'r', lw=2, label=lab)
limit_labels(axe,r'$\rho$', r'$P_e$ [$kW/m^3$]','')
limit_labels(axi,r'$\rho$', r'$P_i$ [$kW/m^3$]','')
limit_labels(axn,r'$\rho$', r'$n_f/n_e$ [%]','')
#limit_labels(axj,r'$\rho$', r'j shielded [$kA/m^2$]','')
axn.legend(bbox_to_anchor=(1.05, 0.65), loc=2)
f.tight_layout()
f.subplots_adjust(right=0.8)


f = plt.figure(figsize=(10,8))
axj  = f.add_subplot(224)
axcd = f.add_subplot(221)
axsh = f.add_subplot(222)
axeff = f.add_subplot(223)
        
# for ax in [axcd, axsh, axeff]:
#     if time[0]!=0:
#         for i, el in enumerate(ind):
#             ax.axvline(x=self.t[self.inj_index[el]], color=col[i], lw=1.8, linestyle='--')

t = np.concatenate((o1.t[ind1], o2.t[ind2]))
tmp=np.concatenate((o1.nbcd[ind1], o2.nbcd[ind2]))
axcd.plot(t, tmp*1e-3, 'k', lw=2.3)
tmp=np.concatenate((o1.shield[ind1], o2.shield[ind2]))
axsh.plot(t, 1.-tmp, 'k', lw=2.3)
tmp=np.concatenate((o1.eff[ind1], o2.eff[ind2]))
axeff.plot(t, tmp*100., 'k', lw=2.3)

axj.plot(o1.rho, o1.nb_FKP_vars['nbcd'][ind1t,:]*1e-3, \
         'k',lw=2.3,label=r't = {:.2f} s'.format(o1.t[ind1t]))
axj.plot(o2.rho, o2.nb_FKP_vars['nbcd'][ind2t,:]*1e-3, \
         'r',lw=2.3,label=r't = {:.2f} s'.format(o2.t[ind2t]))

axj.set_xlabel(r'$\rho$'); axj.set_ylabel('$j^{SH}$ [$kA/m^2$]')
limit_labels(axcd, r't [s]', r'$I_{CD}$ [$kA$]'); axj.grid('on')
axcd.legend(loc='best')
limit_labels(axsh, r't [s]', r'$1-I_{SH}/I_{UN}$')
limit_labels(axeff, r't [s]', r' $\eta \left[\frac{10^{18} A}{W m^2}\right]$', r'NBCD efficiency')
axeff.set_ylim([0,1.])
axj.legend(loc='upper right', fontsize='medium')
#f.text(0.01, 0.01, self.runid)
f.tight_layout();

plt.show()
