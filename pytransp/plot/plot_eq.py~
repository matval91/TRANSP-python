import utils.plot_utils as au
import matplotlib.pyplot as plt
import pytransp.trutils.transp_utils as tu
col, col2, styles, my_cmap, dpi = au.define_colors()

def plot_eq(to, time=[0]):
    """ plot equilibrium

    Plots equilibrium

    Parameters:
        time (arr) : array with the times   where to plot the lines
    Attributes:
        None    
    Note:
    """        
    au.common_style()
    ind = tu._time_to_ind(to.t, time)
    ind=ind[0]
    f = plt.figure(figsize=(12,10))
    axj = f.add_subplot(221)
    axp = f.add_subplot(222)
    axf = f.add_subplot(223)
    
    axj.plot(to.rho[ind,:], to.eq_vars['j'][ind,:]*1e-3, 'k', label=r'$j_{TOT}$', lw=2.)
    axj.plot(to.rho[ind,:], to.eq_vars['joh'][ind,:]*1e-3, 'b', label=r'$j_{OH}$', lw=2.)
    axj.plot(to.rho[ind,:], to.eq_vars['jbs'][ind,:]*1e-3, 'r', label=r'$j_{BS}$', lw=2.)
    add_curr=to.eq_vars['j'][ind,:]-to.eq_vars['joh'][ind,:]-to.eq_vars['jbs'][ind,:]
    axj.plot(to.rho[ind,:], add_curr*1e-3, 'g', label=r'$j_{Add. heat.}$', lw=2.)

    axp.plot(to.rho[ind,:], to.eq_vars['p'][ind,:]*1e-3, 'k', lw=2.)
    
    axf.plot(to.rho[ind,:], to.eq_vars['pol_flux'][ind,:], 'k', label=r'Pol. flux', lw=2.)
    axf.plot(to.rho[ind,:], to.eq_vars['tor_flux'][ind,:], 'k--', label=r'Tor. Flux', lw=2.)
    axq = axf.twinx()  # instantiate a second axes that shares the same x-axis
    axq.plot(to.rho[ind,:], to.eq_vars['q'][ind,:], 'r', label=r'q', lw=2.)
    axq.tick_params(axis='y', labelcolor='r')
    axq.set_ylabel(r'q', color='r')
    axq.plot([0,1], [1,1], 'r--');
    axq.set_ylim([0,10]); axf.set_ylim([0,0.5])
   #========================================================
    # SET TICK LOCATION
    #========================================================
    au.limit_labels(axj, r'$\rho_{TOR}$', r'j [kA/m$^2$]','' )
    au.limit_labels(axp, r'$\rho_{TOR}$', r'p [kPa]','' )
    axf.set_xlabel(r'$\rho_{TOR}$')
    axf.set_ylabel(r'Fluxes (Wb/rad)')
    axj.legend(loc='best')
    axf.legend(loc='upper left'); axf.grid('on')
    f.tight_layout()
    f.subplots_adjust(top=0.9)
    f.suptitle('{} t={:.2f} s'.format(to.fname[-12:-4], time))
    plt.show()    
